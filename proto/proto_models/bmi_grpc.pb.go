// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/bmi.proto

package proto_models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BMICalculator_CalculateBMI_FullMethodName = "/proto.BMICalculator/CalculateBMI"
)

// BMICalculatorClient is the client API for BMICalculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BMICalculatorClient interface {
	CalculateBMI(ctx context.Context, in *BMICalculateRequest, opts ...grpc.CallOption) (*BMICalculateResponse, error)
}

type bMICalculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewBMICalculatorClient(cc grpc.ClientConnInterface) BMICalculatorClient {
	return &bMICalculatorClient{cc}
}

func (c *bMICalculatorClient) CalculateBMI(ctx context.Context, in *BMICalculateRequest, opts ...grpc.CallOption) (*BMICalculateResponse, error) {
	out := new(BMICalculateResponse)
	err := c.cc.Invoke(ctx, BMICalculator_CalculateBMI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BMICalculatorServer is the server API for BMICalculator service.
// All implementations should embed UnimplementedBMICalculatorServer
// for forward compatibility
type BMICalculatorServer interface {
	CalculateBMI(context.Context, *BMICalculateRequest) (*BMICalculateResponse, error)
}

// UnimplementedBMICalculatorServer should be embedded to have forward compatible implementations.
type UnimplementedBMICalculatorServer struct {
}

func (UnimplementedBMICalculatorServer) CalculateBMI(context.Context, *BMICalculateRequest) (*BMICalculateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateBMI not implemented")
}

// UnsafeBMICalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BMICalculatorServer will
// result in compilation errors.
type UnsafeBMICalculatorServer interface {
	mustEmbedUnimplementedBMICalculatorServer()
}

func RegisterBMICalculatorServer(s grpc.ServiceRegistrar, srv BMICalculatorServer) {
	s.RegisterService(&BMICalculator_ServiceDesc, srv)
}

func _BMICalculator_CalculateBMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BMICalculateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BMICalculatorServer).CalculateBMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BMICalculator_CalculateBMI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BMICalculatorServer).CalculateBMI(ctx, req.(*BMICalculateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BMICalculator_ServiceDesc is the grpc.ServiceDesc for BMICalculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BMICalculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BMICalculator",
	HandlerType: (*BMICalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateBMI",
			Handler:    _BMICalculator_CalculateBMI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bmi.proto",
}
